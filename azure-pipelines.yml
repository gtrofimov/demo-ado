# Starter pipeline
# Pull from Repo
# Import Project into Docekr SOAtest CLI container and Run
# Azure YAML docs:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# Set Up Project
steps:
- script: |
    echo "Starting Pipeline Execution."
    echo "Create ./tmp directory for volume mount."
    mkdir tmp
    echo ${PWD}
    echo "Copy SOAtest project contents to volume directory."
    cp -R $(soatest.project) tmp/.
    
    # Set Up and write .properties file
    echo  -e "\n~~~\nSetting up and creating soatestcli.properties file.\n"
    echo $"
    license.network.auth.enabled=true  
    license.network.password=$(license.server.password)
    license.network.url=$(license.server.url)
    license.network.use.specified.server=true
    license.network.user=$(license.server.username)
    soatest.license.network.edition=custom_edition
    soatest.license.custom_edition_features=RuleWizard, Command Line, SOA, Web, Server API Enabled, Message Packs, Advanced Test Generation Desktop, Requirements Traceability, API Security Testing
    soatest.license.use_network=true
    virtualize.license.network.edition=performance_server_edition
    virtualize.license.use_network=true" >> tmp/soatestcli.properties
    echo -e "\nDebug -- Verify workspace contents.\n"
    ls -R
    echo -e "\nDebug -- Verify soatestcli.properties file contents."
    cat tmp/soatestcli.properties

    # Run Docker container with mount and run tests
    echo -e "\n~~~\nRun SOAtestCLI Docker container & mount ./tmp volume.\n"
    
    docker --version

    docker run -i \
    -u 0:0 \
    -e ACCEPT_EULA=true \
    -v "$(pwd)/tmp:/tmp" \
    parasoft/soavirt:2023.2.2 /bin/bash -c " \
    cat /tmp/soatestcli.properties; \
    soatestcli \
    -settings /tmp/soatestcli.properties \
    -import /tmp/$(soatest.project); \
    soatestcli \
    -resource /$(soatest.project) \
    -config 'user://Example Configuration' \
    -settings /tmp/soatestcli.properties \
    -report /tmp"

    echo -e "\nDebug -- Verify ./tmp contents\n"
    ls -R $(pwd)/tmp
  displayName: Run Tests
  env:
    pwd: $(Build.Repository.LocalPath)

# Publish Test Results
- task: PublishParasoftResults@1
  inputs:
    resultsFiles: |
      **/rep*.xml
      **/rep*.sarif
      **/coverage.xml
    searchFolder: '''$(Build.Repository.LocalPath)/temp/'